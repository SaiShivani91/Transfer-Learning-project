# -*- coding: utf-8 -*-
"""Dog Vs Cat Classification using Transfer Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F3WI-SadYZkts7ZMgGwRwsvAjLQj7bls

Transfer learning is an important topic in DL where the pretrained models are used to build usecases.

In this project, a pretrained model called Mobilenet V2 is used. It is trained on images of cats and dogs intern the model tells us whether the given image is cat or dog.

What is transfer learning?
Transfer learning is a deep learning technique where we use a pre-trained model.This pre-trained model is trained for one task and can be re-trained for a similar task with smaller dataset.

Transfer learning gives higher accuracy when compared to training models from scratch.

Ex: Image recognition model pre-trained on one dataset can be used for a image recognition of other dataset.

Examples of pre-trained models:
1. VGG-16   -- famous for image recognition
2. ResNet50
3. Inceptionv3
4. MobileNet V2  -- A lightweight model
5. YOLO -- You Only Look Once --- used for object detection

Workflow:

Dataset --> Image Processing --> Train Test Split --> Pretrained model --> prediction
"""

!pip install kaggle

#Configuring the path of kaggle.json file

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# importing Dog Vs Cat dataset from kaggle

#kaggle api

!kaggle competitions download -c dogs-vs-cats

"""The above code is from dataset API"""

!ls

#Extracting the compressed file or dataset

from zipfile import ZipFile

dataset = "/content/dogs-vs-cats.zip"

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print("The dataset is extracted")

#Extraction for train.zip

from zipfile import ZipFile

dataset = "/content/train.zip"

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print("The dataset is extracted")

import os

#counting the number of files in train folder

path, dirs, files = next(os.walk('/content/train'))

file_count = len(files)

print("Number of images: ", file_count)

"""Here, all the 25000 data points are not used for trained. Since we are using a pretrained model, a sample of the considered dataset is taken.

"""

# Printing the name of images

file_names = os.listdir("/content/train")

print(file_names)

# Importing the dependencies

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow

# Displaying the images of dogs and cats

img = mpimg.imread('/content/train/dog.10040.jpg')
imgplot = plt.imshow(img)
plt.show()

img = mpimg.imread('/content/train/cat.6495.jpg')
imgplot = plt.imshow(img)
plt.show()

"""Here all the images are of different size. Here we are going to use MobileNet V2 model which accepts images of size 224 * 224."""

file_names = os.listdir('/content/train')

for i in range(5):

  print(file_names[i])

  name = file_names[i]
  print(name[0:3]) # prints the first three letters of the file_names

file_names = os.listdir('/content/train')

dog_count = 0
cat_count = 0

for img_file in file_names:

  name = img_file[0:3]

  if name == 'dog':
    dog_count += 1

  else:
    cat_count += 1

print("Number of dog images: ", dog_count)
print("Number of cat images: ", cat_count)

# Resizing all the images
# creating a new directory for resized images

os.mkdir("/content/image resized")

original_folder = "/content/train/"

resized_folder = "/content/image resized/"

for i in range(2000):

  filename = os.listdir(original_folder)[i]
  img_path = original_folder+filename

  img = Image.open(img_path)
  img = img.resize((224, 224))
  img = img.convert('RGB')

  newImagePath = resized_folder+filename
  img.save(newImagePath)

# Displaying the resized images of dogs and cats

img = mpimg.imread('/content/image resized/dog.10040.jpg')
imgplot = plt.imshow(img)
plt.show()

img = mpimg.imread('/content/image resized/cat.6495.jpg')
imgplot = plt.imshow(img)
plt.show()

# Creating labels for resized images of dogs and cats

#cat --> 0, dog --> 1

# Creating a for loop to assign labels to the images

filenames = os.listdir('/content/image resized/')

labels = []

for i in range(2000):
  file_name = filenames[i]
  label = file_name[0:3]

  if label == 'dog':
    labels.append(1)

  else:
    labels.append(0)

print(filenames[0:5])

print(len(filenames))

print(labels[0:5])
print(len(labels))

# Counting the images of dogs and cats out of 2000 images

values, counts = np.unique(labels, return_counts = True)
print(values)
print(counts)

"""Above values show that the distribution is balanced."""

# Converting all the resized images to numpy arrays

import cv2
import glob

image_directory = "/content/image resized/"

image_extension = ['png', 'jpg']

files = []

[files.extend(glob.glob(image_directory + '*.' + e)) for e in image_extension]

dog_cat_images = np.asarray([cv2.imread(file) for file in files])

print(dog_cat_images)

print(type(dog_cat_images))

print(dog_cat_images.shape)

X = dog_cat_images
Y = np.asarray(labels)

# Train test split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

# Scaling the data

X_train_scaled = X_train/255

X_test_scaled = X_test/255

print(X_train_scaled)

# Building the neural network

import tensorflow as tf
import tensorflow_hub as hub

mobilenet_model = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4'

pretrained_model = hub.KerasLayer(mobilenet_model, input_shape = (224, 224, 3), trainable = False)

num_of_classes = 2

model = tf.keras.Sequential([

                             pretrained_model,
                             tf.keras.layers.Dense(num_of_classes)
])

model.summary()

model.compile(

              optimizer = 'adam', loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits = True),
              metrics = ['accuracy']
)

model.fit(X_train_scaled, Y_train, epochs = 5)

score, accuracy = model.evaluate(X_test_scaled, Y_test)
print("Test loss: ", score)
print("Test accuracy: ", accuracy)

# Building a predictive system

input_image_path = input("Path of the image to be predicted: ")

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (224, 224))

input_image_scaled = input_image_resized/255

image_reshaped = np.reshape(input_image_scaled, [1, 224, 224, 3])  # 1 means we are giving one input only we are predicting for one data point only

input_prediction = model.predict(image_reshaped)

print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 0:
  print("The image represents a Cat")

else:
  print("The image represents a Dog")

## Build an UI using flask or streamlit so that the user can simply upload an image for classification

